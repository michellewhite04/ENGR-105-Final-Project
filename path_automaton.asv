function [path_para,temp_act_1,temp_act_2, crash]=path_automaton(path_para,node_act_1,node_act_2, crash)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This function update the status of a single path
%
% Inputs:
% path_table: Cell array, each row contains parameters for one path
%
%    format: {'path_name',path_state_index, entry_node_index,
%            exit_node_index, amplitude_factor, forward_speed,
%            backward_speed, forward_timer_current, forward_timer_default,
%            backward_timer_current, backward_timer_default, path_length,
%            path_slope, entry_node_activation, exit_node_activation}
%
% Local variables:
% node_act_1: boolean, activation status of the entry node
% node_act_2: boolean, activation status of the exit node
%
% Outputs:
% temp_act_1: boolean, local temporary node activation of the entry node
% temp_act_2: boolean, local temporary node activation of the exit node
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

temp_act_1=0;
temp_act_2=0;

switch path_para{2}
    case 1 % Idle
        % if activation coming from entry node
        if node_act_1
            % Antegrade conduction
            path_para{2}=2;
            path_para{8}=path_para{9};
        % if activation coming from exit node
        else if node_act_2
                % Retrograde conduction
                path_para{2}=3;
                path_para{10}=path_para{11};
            end
        end
        
    case 2 % Antegrade conduction
        % if activation coming from exit node
        if node_act_2
            % double
            path_para{2}=5;
%             reset timer
%            path_para{8}=path_para{9};
        else
            % if timer running out
            if path_para{8}==0
                % reset timer
                path_para{8}=path_para{9};
                % activate exit node
                temp_act_2=1;
                % set impulse to yellow
                colorChoice = [1,1,0];
                % go to conflict state
                path_para{2}=4;
            else
                % timer
                path_para{8}=path_para{8}-1;
            end
        end
            
    case 3 % Retro
        % if activation coming from entry node
        if node_act_1
            % conflict
            path_para{2}=5;
              % reset timer
              % path_para{10}=path_para{11};
        else
            % if timer runs out
            if path_para{10}==0
                % reset timer
                path_para{10}=path_para{11};
                % activate the entry node
                temp_act_1=1;
                % set impulse to yellow
                colorChoice = [1,1,0];
                % change state to conflict
                path_para{2}=4;
            else
                % timer
                path_para{10}=path_para{10}-1;
            end
        end
        
    case 4 % temp
        % go to idle state
        path_para{2}=1;
        
    case 5 % double
                  
        if path_para{10}==0 %retro was finished anyway
            % reset timer
            path_para{10}=path_para{11};
            % activate the entry node
            temp_act_1=1;
            % set impulse to yellow
            colorChoice = [1,1,0];
            % change state to ante
            path_para{2}=2;
            return
        end
        if path_para{8}==0 %ante was finished anyway
            % reset timer
            path_para{8}=path_para{9};
            % activate exit node
            temp_act_2=1;
            % set impulse to yellow
            colorChoice = [1,1,0];
            % go to retro state
            path_para{2}=3;
            return
        end
        
        % this threshold makes a difference!!!
        if abs(1-path_para{8}/path_para{9}-path_para{10}/path_para{11})<1.1/min([path_para{9},path_para{11}])
            path_para{10}=path_para{11};
            path_para{8}=path_para{9};
            path_para{2}=4; % eventually crash and go to temp state
            crash = 1;
            
        else
            path_para{8}=path_para{8}-1;
            path_para{10}=path_para{10}-1;
        end
        
end

